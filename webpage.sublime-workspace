{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"backgr",
				"background-color"
			],
			[
				"fmt_ppr_",
				"fmt_ppr_cmp_exp_chk"
			],
			[
				"fmt_ppr_cmp_",
				"fmt_ppr_cmp_branch_prefix"
			],
			[
				"fmt_ppr_cmp_exp_",
				"fmt_ppr_cmp_exp_syn"
			],
			[
				"is",
				"is_hidden"
			],
			[
				"mo",
				"module	module"
			],
			[
				"curre",
				"current"
			],
			[
				"current",
				"currentName"
			],
			[
				"curren",
				"currentName"
			],
			[
				"add",
				"addHidden"
			],
			[
				"index",
				"index_of_name"
			],
			[
				"name",
				"name_of_id"
			],
			[
				"orig",
				"origName"
			],
			[
				"cur",
				"current"
			],
			[
				"String",
				"string_of_name"
			],
			[
				"no",
				"normCtx"
			],
			[
				"norm",
				"normDCtx"
			],
			[
				"Ep",
				"EmptySub"
			],
			[
				"mc",
				"mctx"
			],
			[
				"Emt",
				"EmptySub"
			],
			[
				"string",
				"string_of_name"
			],
			[
				"curr",
				"currentName"
			],
			[
				"ty",
				"typ"
			],
			[
				"modu",
				"module_id"
			],
			[
				"cu",
				"current"
			],
			[
				"Typ",
				"TypDecl"
			],
			[
				"Empt",
				"EmptySub"
			],
			[
				"render",
				"render_cid_term"
			],
			[
				"dec",
				"decl"
			],
			[
				"module",
				"module_sig"
			],
			[
				"signa",
				"signature"
			],
			[
				"sig",
				"signature"
			],
			[
				"is_s",
				"is_signature"
			],
			[
				"rend",
				"render_name"
			],
			[
				"Mod",
				"Modules"
			],
			[
				"not",
				"NotUnique"
			],
			[
				"mod",
				"modules"
			],
			[
				"tr",
				"try	try"
			],
			[
				"ln",
				"length"
			],
			[
				"forceCom",
				"forceCompKind"
			],
			[
				"M",
				"Modules"
			],
			[
				"open",
				"opened"
			],
			[
				"iter",
				"iter_find"
			],
			[
				"modul",
				"modules"
			],
			[
				"force",
				"forceKind"
			],
			[
				"forc",
				"forceTypDecl"
			],
			[
				"for",
				"forceTyp"
			],
			[
				"SigmA",
				"SigmaElem"
			],
			[
				"Sigm",
				"SigmaLast"
			],
			[
				"pi",
				"PiTyp"
			],
			[
				"strin",
				"string_of_int"
			],
			[
				"mk_tok",
				"mk_tok_of_lexeme"
			],
			[
				"decl",
				"decls"
			],
			[
				"recSgn",
				"recSgnDecl"
			],
			[
				"cid",
				"cid_typ"
			],
			[
				"Strin",
				"string_of_name"
			],
			[
				"def",
				"default_precedence"
			],
			[
				"Sy",
				"SYMBOL"
			],
			[
				"Par",
				"ParseError"
			],
			[
				"clf_ter",
				"clf_term_app"
			],
			[
				"print",
				"print_string"
			],
			[
				"term",
				"term_or_sub"
			],
			[
				"Some",
				"SomeString"
			],
			[
				"symbol",
				"SYMBOL"
			],
			[
				"Type",
				"Typeinfo"
			],
			[
				"fmt_ppr_cmp_exp",
				"fmt_ppr_cmp_exp_chk"
			],
			[
				"to",
				"to_html"
			],
			[
				"ou",
				"output_string"
			],
			[
				"fmt_",
				"fmt_ppr_lf_dctx"
			],
			[
				"Empty",
				"EmptySub"
			],
			[
				"Syn",
				"Syntax"
			],
			[
				"norma",
				"normalToString"
			],
			[
				"normal",
				"normalToString"
			],
			[
				"string_",
				"string_of_int"
			],
			[
				"Na",
				"NamedHoles"
			],
			[
				"expli",
				"excplicitNames"
			],
			[
				"prin",
				"printingHoles"
			],
			[
				"stri",
				"string_of_name"
			],
			[
				"var_",
				"var_gen"
			],
			[
				"mv",
				"mvar_gen"
			],
			[
				"fun",
				"function"
			],
			[
				"str",
				"string_of_name"
			],
			[
				"args",
				"args_expected"
			],
			[
				"Operat",
				"operator"
			],
			[
				"prag",
				"pragmaExists"
			],
			[
				"pra",
				"pragmas"
			],
			[
				"LIS",
				"LIST1"
			],
			[
				"loc",
				"loc_of_head"
			],
			[
				"func",
				"function"
			],
			[
				"Som",
				"SomeString"
			],
			[
				"mk",
				"mk_name"
			],
			[
				"strng",
				"string_of_int"
			],
			[
				"some",
				"SomeString"
			],
			[
				"imp",
				"implicit_arguments"
			],
			[
				"length",
				"length_of_spine"
			],
			[
				"im",
				"implicit_arguments"
			],
			[
				"Illeg",
				"IllegalOpPrag"
			],
			[
				"sch",
				"sch_elem"
			],
			[
				"up",
				"uppercase"
			],
			[
				"Exc",
				"Explicit"
			],
			[
				"Alpha",
				"ALPHA"
			],
			[
				"Al",
				"ALPHA"
			],
			[
				"file",
				"filename"
			],
			[
				"newNam",
				"newName"
			],
			[
				"MVar",
				"MVarData"
			],
			[
				"ind",
				"index_of_name"
			],
			[
				"regex",
				"regexp_string"
			],
			[
				"replace",
				"replaceNewLine"
			],
			[
				"remove",
				"removeSpaces"
			],
			[
				"exp_",
				"exp_chk"
			],
			[
				"exp_ch",
				"fmt_ppr_cmp_exp_chk"
			],
			[
				"fmt",
				"fmt_ppr_cmp_copattern_spine"
			],
			[
				"Ops",
				"OpPragmas"
			],
			[
				"print_",
				"print_int"
			],
			[
				"List",
				"LIST1"
			],
			[
				"arg",
				"arglist"
			],
			[
				"new_",
				"new_list"
			],
			[
				"as",
				"asHtml"
			],
			[
				"do",
				"do_command"
			],
			[
				"typ",
				"typDeclToString"
			],
			[
				"mctx",
				"mctxToString"
			],
			[
				"lf",
				"LFHole"
			],
			[
				"Misp",
				"MispacedOperator"
			],
			[
				"new",
				"new_root"
			],
			[
				"Mis",
				"MispacedOperator"
			],
			[
				"op",
				"OpPragmas"
			],
			[
				"pSi",
				"cPsi"
			],
			[
				"pint",
				"print_string"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/beluga-source.sublime-build",
	"command_palette":
	{
		"height": 285.0,
		"selected_items":
		[
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"orig clone",
				"Origami: Clone File to Pane on the Right"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"syn ocaml",
				"Set Syntax: OCaml"
			],
			[
				"repl o",
				"SublimeREPL: OCaml"
			],
			[
				"git difftoo",
				"Git: Diff Tool Current File"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"repl oca",
				"SublimeREPL: OCaml"
			],
			[
				"git log",
				"Git: Log Current File"
			],
			[
				"repl oc",
				"SublimeREPL: OCaml"
			],
			[
				"repl ",
				"SublimeREPL: OCaml"
			],
			[
				"ocaml",
				"Set Syntax: OCaml"
			],
			[
				"dif cu",
				"Git: Diff Current File"
			],
			[
				"git diff cu",
				"Git: Diff Current File"
			],
			[
				"diff c",
				"Git: Diff Current File"
			],
			[
				"git diff f",
				"Git: Diff Current File"
			],
			[
				"repl",
				"SublimeREPL: OCaml"
			],
			[
				"sublime repl oca",
				"SublimeREPL: OCaml"
			],
			[
				"add fol",
				"Project: Add Folder"
			],
			[
				"diff file",
				"Git: Diff Current File"
			],
			[
				"git diff file",
				"Git: Diff Current File"
			],
			[
				"git blame",
				"Git: Blame"
			],
			[
				"git ",
				"Git: Gitk This File"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"gitk",
				"Git: Gitk This File"
			],
			[
				"dif",
				"Git: Diff Current File"
			],
			[
				"gutter",
				"GitGutter: Show Comparing Against"
			],
			[
				"git gutter",
				"GitGutter: Compare Against Branch"
			],
			[
				"git gutt",
				"GitGutter: Compare Against Commit"
			],
			[
				"pack inst",
				"Package Control: Install Package"
			],
			[
				"pack in",
				"Package Control: Install Package"
			],
			[
				"close",
				"Project: Close"
			],
			[
				"syntaxlat",
				"Set Syntax: LaTeX"
			],
			[
				"git stau",
				"Git: Status"
			],
			[
				"snippet",
				"Snippet: class"
			],
			[
				"git: ",
				"Git: Gitk"
			],
			[
				"git commit",
				"Git: Commit history"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"git:stat",
				"Git: Status"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"sublime",
				"SublimeREPL: OCaml"
			],
			[
				"oca",
				"SublimeREPL: OCaml"
			],
			[
				"",
				"Package Control: List Packages"
			],
			[
				"inst	",
				"Package Control: Install Package"
			],
			[
				"oackage",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/bootstrap-3/default.html",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/bootstrap-3/bootstrap/css/bootstrap.min.css",
		"/home/scott/Programming/sacooper-git/Webpage/index.md",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/bootstrap-3/page.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/bootstrap-3/post.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/JB/setup",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/semantic/css/bs-sticky-footer.css",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/bootstrap-3/bootstrap/css/bootstrap-theme.min.css",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/bootstrap-3/css/style.css",
		"/home/scott/Programming/sacooper-git/Webpage/_layouts/home.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/semantic/post.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/JB/pages_list",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/semantic/page.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/semantic/default.html",
		"/home/scott/Programming/sacooper-git/Webpage/_layouts/default.html",
		"/home/scott/Programming/sacooper-git/Webpage/_layouts/post.html",
		"/home/scott/Programming/sacooper-git/Webpage/_config.yml",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/semantic/css/semantic.css",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/semantic/settings.yml",
		"/home/scott/Programming/sacooper-git/Webpage/rss.xml",
		"/home/scott/Programming/sacooper-git/Webpage/atom.xml",
		"/home/scott/Programming/sacooper-git/Webpage/blog.md",
		"/home/scott/Programming/sacooper-git/Webpage/categories.html",
		"/home/scott/Programming/sacooper-git/Webpage/tags.html",
		"/home/scott/Programming/sacooper-git/Webpage/archive.html",
		"/home/scott/Programming/sacooper-git/Webpage/contact.html",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/JB/posts_collate",
		"/home/scott/Programming/sacooper-git/Webpage/_posts/2014-08-03-and-so-it-begins.md",
		"/home/scott/Programming/sacooper-git/Webpage/_posts/core-samples/2011-12-29-jekyll-introduction.md",
		"/home/scott/Programming/sacooper-git/Webpage/pages.html",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/bootstrap-3/bootstrap/css/bs-sticky-footer.css",
		"/home/scott/Programming/sacooper-git/Webpage/assets/themes/bootstrap-3/bootstrap/css/alt.min.css",
		"/home/scott/Programming/sacooper-git/Webpage/_includes/themes/bootstrap-3/settings.yml",
		"/home/scott/Programming/sacooper-git/Webpage/.gitignore",
		"/home/scott/Programming/sacooper-git/Webpage/webpage.sublime-workspace",
		"/home/scott/Programming/sacooper-git/Webpage/_layouts/page.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/404.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/archive.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/categories.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/pages.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/tags.html",
		"/home/scott/Programming/sacooper-git/Webpage/_site/index.html",
		"/home/scott/Programming/sacooper-git/Webpage/index.html",
		"/home/scott/Programming/sacooper-git/Webpage/ls",
		"/home/scott/Programming/sacooper-git/Webpage/css/blog-home.css",
		"/home/scott/Programming/sacooper-git/Webpage/blog/blog-main.html",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/typeinfo.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/whnf.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/check.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/lfcheck.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/pretty.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/substitution.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/reconstruct.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/logic.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/logic.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/coverage.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/abstract.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/ctxsub.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/convSigma.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/lfrecon.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/apxnorm.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/unify.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/prettyext.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualUntypedR.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/synext.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/codatatypes/colists.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/synint.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/small-step/lam.annot",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/synapx.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/typeinfo.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/LF/simple-typing.lf",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/html.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/beluga/main.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/tools/beluga-mode.el",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/beli/main.ml",
		"/usr/lib/ocaml/string.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/latex.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/prettylatex.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/annot.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/annot.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/small-step/lam.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/base/alpha.annot",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/lexer.ml",
		"/home/scott/Dropbox/Research/CompLogic/Personal/append2.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/parser.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/equal/alg-equal-ctxrel.bel",
		"/home/scott/Dropbox/Research/CompLogic/Orbi/ParRed.orbi",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/recsgn.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/html.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualUntypedG.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualPoly.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/LFHoles/pearl-lfhole.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/LFHoles/tps.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/LFHoles/debruijn.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualUntypedG2.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualPoly-alt.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/church-rosser/par-red.bel",
		"/home/scott/Dropbox/Research/CompLogic/Tests/HTML/arith.bel",
		"/home/scott/Dropbox/Research/CompLogic/Tests/arith.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/EqualUntypedG .bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/token.ml",
		"/home/scott/Downloads/EqualUntypedG.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/beli/command.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/interactive.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/pretty.mli",
		"/usr/lib/ocaml/format.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/locs.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/holes.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/lfholes.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/lfholes.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/store.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/store.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/error.ml",
		"/etc/bash.bashrc",
		"/home/scott/Desktop/meals.txt",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/substvars/weak-norm-closed-ideal.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/opsem.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/modules/private.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/index.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/id.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/opsem.mli",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/modules/nested.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/modules/adapted/fol-handbook.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/error/modules/private3.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/t/success/modules/adapted/include.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/src/core/context.ml",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/tapl/ch3/evaluation-seq.bel",
		"/home/scott/Dropbox/Research/CompLogic/beluga/examples/tapl/ch3/exp.bel"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"#00bc8c",
			".dropdown{",
			".dropdown",
			":hover",
			"a:hover",
			"a",
			"col-xs-12",
			".page-header",
			"footer",
			".dropdown:hover",
			".dropdown{",
			".dropdown",
			"''",
			"site.posts",
			"#0ce3ac",
			"00ABD1",
			"#0ce3ac",
			".body",
			"body",
			"pyg",
			"inverse",
			"Typeinfo",
			"MVar",
			"Typeinfo",
			"TypInfo",
			"Root",
			"Proj(loc', ",
			"Proj",
			"1223",
			"head",
			"Offset",
			"MVar",
			"Ext.LF.MVar",
			"MVar",
			"Inst",
			"MVar",
			"MInst",
			"and cvar",
			"cvar",
			"Minst",
			"MInst",
			"IndexHead",
			"cvar",
			"Inst",
			"cofun",
			"Cofun",
			"Data",
			"DataDest",
			"DatDest",
			"*",
			"Comp.BranchSBox",
			"laskdfj",
			"%not",
			"Comp.BranchSBox",
			"Comp.BranchSBox ",
			"BranchSBox",
			"Comp.Case",
			"Branch",
			"Comp.Case",
			"Loc.ghost",
			"loc_ghost",
			"Loc.ghost",
			"Typeinfo.LF.add",
			"Typeinfo.LF.",
			"Typeinfo ",
			"Typeinfo.add",
			"Typeinfo",
			"Loc.ghost",
			"M8",
			"Loc.ghost",
			"M8",
			"loc",
			"1 0 0",
			"0 0 1",
			"Atom",
			"ghost",
			"lowerMVar",
			"lowerMVar1",
			"Inst",
			"lowerMVar",
			"MVar",
			"Loc.ghost",
			"usage",
			"-usage",
			"-help",
			"blit",
			"1 0 0",
			"un",
			"step ",
			"pres",
			"S1",
			"[ |- has",
			"Locs.",
			"cmp_cdat:",
			"cmp_cdat",
			"retname",
			"\"datatype",
			"ctype",
			"mixtyp:",
			"cmp_kind:",
			"cmp_cdat:",
			":",
			"datatype",
			"-&gt;",
			"-%gt;",
			"rec",
			"D1",
			"```",
			"%{",
			"```",
			"}%",
			"%{",
			"schema",
			"%name",
			"%nae",
			".",
			"a",
			"%",
			"`",
			"%",
			"% ",
			"`",
			"```",
			"}%",
			"%{",
			"`",
			"}%",
			"%{"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"#00ABD1",
			"00ABD1",
			"->",
			"```\n->",
			"```\n",
			"\n```",
			"```",
			"",
			"@\\n\\",
			"`\\",
			"`\\\n    if !Modules.ignoreHidden then false else\n    try (m <> !Modules.current) && (BitSet.is_set (DynArray.get hidden m) n) with _ -> false",
			"",
			"\n    if !Modules.ignoreHidden then false else\n    try (m <> !Modules.current) && (BitSet.is_set (DynArray.get hidden m) n) with _ -> false",
			"(x, m, n)",
			"let is_hidden ((x, m, n) : Id.cid_typ) : bool = \n      match x with [] -> false\n      | _ -> try (m <> !Modules.current) && (BitSet.is_set (DynArray.get hidden m) n) with _ -> false",
			"if is_hidden (m, l, i) then failwith \"HERE2\" else (m, l, i)",
			"if is_hidden x then failwith \"HERE\" else x",
			"",
			"then Modules.correct m l' else m in",
			"Common",
			"try (m <> !Modules.current) && (BitSet.is_set (DynArray.get hidden m) n) with _ -> false",
			"let is_hidden ((_, m, n) : Id.cid_typ) : bool = \n    try (m <> !Modules.current) && (BitSet.is_set (DynArray.get hidden m) n) with _ -> false",
			"let get ((m, l, n) as cid) =\n      if is_hidden cid then raise Not_found else",
			"",
			"let get ((m, l, n) as cid) =\n      if is_hidden cid then raise Not_found else",
			"l'",
			"m",
			"Modules.find n directory",
			"DynArray.get",
			"module_id * int",
			"",
			",",
			"_,",
			"Int.",
			"loc",
			"",
			"lf_module_sym",
			"PTyp",
			"string list * int",
			"s N",
			"| Ext.",
			"",
			"Modules.decl_to_sig",
			"Ext.Sgn.",
			"Store.Modules.convert",
			"Hashtbl.find",
			"cid_prog",
			"cid_typdef",
			"cid_comp_dest",
			"cid_comp_const",
			"cid_comp_cotyp",
			"cid_comp_typ",
			"cid_schema",
			"Ext.LF",
			"h_or_n'",
			"PVar",
			"na u",
			"NamedProj",
			"",
			"P",
			"Loc",
			" ",
			"ID",
			"| LF.",
			"u.string_of_name",
			"",
			"Ext.Sgn.Left",
			"LF.Dec",
			"printingHoles",
			"render_name",
			"printing_holes",
			"sgnDeclToHtml",
			"",
			"Ext.Sgn.Right",
			"Store.OpPragmas.",
			"Ext.Sgn.",
			"Ext.LF.",
			"SO",
			"E",
			"spine",
			"normal",
			"u.Id.string_of_name",
			"",
			"| LF.",
			"x",
			"\\n\";",
			"locOfNormal",
			"[ g",
			"div",
			"Ext",
			"occured",
			"arglist",
			"Synint",
			"span",
			"/span>",
			"<span",
			"<div",
			"/div>",
			"spaces",
			"Ext",
			"Apx",
			"appendNormals",
			"MTAtomTerm",
			"dep",
			"'",
			"path-typed.ml",
			"Typeinfo.Typ",
			"typesterms.ml",
			"jpath.ml",
			"dtlists.ml",
			"arith.ml",
			"output_int",
			"mk_entry cD",
			"Typeinfo",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 215.0
	},
	"output.git":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"min.css",
				"assets/themes/bootstrap-3/bootstrap/css/bootstrap.min.css"
			],
			[
				"bootstr",
				"assets/themes/bootstrap-3/bootstrap/css/bootstrap.min.css"
			],
			[
				"setup",
				"_includes/JB/setup"
			],
			[
				"post.h",
				"_includes/themes/bootstrap-3/post.html"
			],
			[
				"foot",
				"assets/themes/semantic/css/bs-sticky-footer.css"
			],
			[
				"style",
				"assets/themes/bootstrap-3/css/style.css"
			],
			[
				"index.md",
				"index.md"
			],
			[
				"pages_list",
				"_includes/JB/pages_list"
			],
			[
				"xml",
				"atom.xml"
			],
			[
				".xml",
				"rss.xml"
			],
			[
				".min.css",
				"assets/themes/bootstrap-3/bootstrap/css/bootstrap.min.css"
			],
			[
				"post",
				"_layouts/post.html"
			],
			[
				"post.html",
				"_includes/themes/bootstrap-3/post.html"
			],
			[
				"type",
				"src/core/typeinfo.ml"
			],
			[
				"lfcheck.ml",
				"src/core/lfcheck.ml"
			],
			[
				"prett",
				"src/core/pretty.ml"
			],
			[
				"check.ml",
				"src/core/check.ml"
			],
			[
				"pretty.ml",
				"src/core/pretty.ml"
			],
			[
				"whn",
				"src/core/whnf.ml"
			],
			[
				"subst",
				"src/core/substitution.ml"
			],
			[
				"recons",
				"src/core/reconstruct.ml"
			],
			[
				"log.",
				"src/core/logic.ml"
			],
			[
				"logic.ml",
				"src/core/logic.mli"
			],
			[
				"index.ml",
				"src/core/index.ml"
			],
			[
				"cover",
				"src/core/coverage.ml"
			],
			[
				"coverage",
				"src/core/coverage.ml"
			],
			[
				"ctxub",
				"src/core/ctxsub.ml"
			],
			[
				"convsi",
				"src/core/convSigma.ml"
			],
			[
				"lfrecon",
				"src/core/lfrecon.ml"
			],
			[
				"unify.ml",
				"src/core/unify.ml"
			],
			[
				"synapx.ml",
				"src/core/synapx.ml"
			],
			[
				"index",
				"src/core/index.ml"
			],
			[
				"synext",
				"src/core/synext.ml"
			],
			[
				"abstr",
				"src/core/abstract.ml"
			],
			[
				"apxnorm",
				"src/core/apxnorm.ml"
			],
			[
				"synint",
				"src/core/synint.ml"
			],
			[
				"synext.ml",
				"src/core/synext.ml"
			],
			[
				"synint.ml",
				"src/core/synint.ml"
			],
			[
				"prettyex",
				"src/core/prettyext.ml"
			],
			[
				"unif",
				"src/core/unify.ml"
			],
			[
				"lfcheck",
				"src/core/lfcheck.ml"
			],
			[
				"reconstr",
				"src/core/reconstruct.ml"
			],
			[
				"synapx",
				"src/core/synapx.ml"
			],
			[
				"whnf",
				"src/core/whnf.ml"
			],
			[
				"ty",
				"src/core/typeinfo.mli"
			],
			[
				"typ",
				"src/core/typeinfo.ml"
			],
			[
				"typin",
				"examples/LF/simple-typing.lf"
			],
			[
				"html.ml",
				"src/core/html.ml"
			],
			[
				"belugamain",
				"src/beluga/main.ml"
			],
			[
				"belugm",
				"tools/beluga-mode.el"
			],
			[
				"belimain",
				"src/beli/main.ml"
			],
			[
				"prettyla",
				"src/core/prettylatex.ml"
			],
			[
				"late",
				"src/core/latex.ml"
			],
			[
				"lexer.ml",
				"src/core/lexer.ml"
			],
			[
				"beluma",
				"src/beluga/main.ml"
			],
			[
				"main.ml",
				"src/beluga/main.ml"
			],
			[
				"beli",
				"src/beli/main.ml"
			],
			[
				"parser",
				"src/core/parser.ml"
			],
			[
				"par-red",
				"examples/church-rosser/par-red.bel"
			],
			[
				"par",
				"examples/church-rosser/par-red.bel"
			],
			[
				"parser.ml",
				"src/core/parser.ml"
			],
			[
				"token",
				"src/core/token.ml"
			],
			[
				"recsg",
				"src/core/recsgn.ml"
			],
			[
				"pretty",
				"src/core/pretty.ml"
			],
			[
				"token.ml",
				"src/core/token.ml"
			],
			[
				"synet",
				"src/core/synext.ml"
			],
			[
				"html",
				"src/core/html.ml"
			],
			[
				"command",
				"src/beli/command.ml"
			],
			[
				"main",
				"src/beli/main.ml"
			],
			[
				"inter",
				"src/core/interactive.ml"
			],
			[
				"command.ml",
				"src/beli/command.ml"
			],
			[
				"lexer",
				"src/core/lexer.ml"
			],
			[
				"pretty.mli",
				"src/core/pretty.mli"
			],
			[
				"recs",
				"src/core/recsgn.ml"
			],
			[
				"loc",
				"src/core/locs.ml"
			],
			[
				"hol",
				"src/core/holes.ml"
			],
			[
				"lfholes.ml",
				"src/core/lfholes.ml"
			],
			[
				"intera",
				"src/core/interactive.ml"
			],
			[
				"holes.ml",
				"src/core/holes.ml"
			],
			[
				"lfholes.mli",
				"src/core/lfholes.mli"
			],
			[
				"lfhol",
				"src/core/lfholes.ml"
			],
			[
				"store.mli",
				"src/core/store.mli"
			],
			[
				"store.ml",
				"src/core/store.ml"
			],
			[
				"synint.",
				"src/core/synint.ml"
			],
			[
				"error",
				"src/core/error.ml"
			],
			[
				"parser.",
				"src/core/parser.ml"
			],
			[
				"recsgn",
				"src/core/recsgn.ml"
			],
			[
				"store",
				"src/core/store.ml"
			],
			[
				"htl",
				"src/core/html.ml"
			],
			[
				"prettym",
				"src/core/pretty.ml"
			],
			[
				"opsem",
				"src/core/opsem.ml"
			],
			[
				"lfrec",
				"src/core/lfrecon.ml"
			],
			[
				"id.ml",
				"src/core/id.ml"
			],
			[
				"synin",
				"src/core/synint.ml"
			],
			[
				"",
				"src/core/pretty.ml"
			],
			[
				"opsem.",
				"src/core/opsem.ml"
			],
			[
				"op",
				"src/core/opsem.ml"
			],
			[
				"prettmli",
				"src/core/pretty.mli"
			],
			[
				"pretty.",
				"src/core/pretty.ml"
			],
			[
				"conte",
				"src/core/context.ml"
			],
			[
				"nats",
				"t/success/modules/nats.bel"
			],
			[
				"pa",
				"src/core/parser.ml"
			],
			[
				"ext.ml",
				"src/core/synext.ml"
			],
			[
				"nats.",
				"t/success/modules/nats.bel"
			],
			[
				"id.mli",
				"src/core/id.mli"
			],
			[
				"lexer.",
				"src/core/lexer.ml"
			],
			[
				"lfhole",
				"src/core/lfholes.ml"
			],
			[
				"beluga",
				"src/beluga/main.ml"
			],
			[
				"whf",
				"src/core/whnf.ml"
			],
			[
				"wh",
				"src/core/whnf.mli"
			],
			[
				"logi",
				"src/core/logic.ml"
			],
			[
				"ctxsu",
				"src/core/ctxsub.ml"
			],
			[
				"lfre",
				"src/core/lfrecon.ml"
			],
			[
				"recon",
				"src/core/reconstruct.ml"
			],
			[
				"check.",
				"src/core/check.ml"
			],
			[
				"lfr",
				"src/core/lfrecon.ml"
			],
			[
				"unify",
				"src/core/unify.ml"
			],
			[
				"context.ml",
				"src/core/context.ml"
			],
			[
				"convsim",
				"src/core/convSigma.ml"
			],
			[
				"hole",
				"src/core/holes.ml"
			],
			[
				"lfho",
				"src/core/lfholes.ml"
			],
			[
				"ctxsub",
				"src/core/ctxsub.ml"
			],
			[
				"mlpack",
				"src/core/core.mlpack"
			],
			[
				"_tags",
				"src/beluga/_tags"
			],
			[
				"mlpa",
				"src/core/core.mlpack"
			],
			[
				"nats.b",
				"t/success/modules/nats.bel"
			],
			[
				"recsgn.ml",
				"src/core/recsgn.ml"
			],
			[
				"whnf.mli",
				"src/core/whnf.mli"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/scott/Dropbox/Research/CompLogic/beluga.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 161.0,
	"status_bar_visible": true
}
